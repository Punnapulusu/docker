#!/bin/bash

# Purpose: Bocker library to generate Dockerfile for phpfpm image
# Author : Anh K. Huynh
# Date   : 2015 May 19th

__PHPFPM_DIR="$(dirname ${BASH_SOURCE[0]:-.})"
ed_reuse $__PHPFPM_DIR/../nginx/Bockerfile

ed_volume /phpfpm/www/

ed_ship --later \
  ed_phpfpm_daemonize \
  ed_phpfpm_generate_config \
  ed_phpfpm_generate_nginx_config

ed_bocker() {
  ed_phpfpm_install
  ed_add phpfpm.conf.default /phpfpm/
}

########################################################################

ed_phpfpm_install() {
  ed_apt_install \
    php5-mysql \
    php5-curl \
    php5-gd \
    php5-cgi \
    php-mail \
    php5-fpm

  ed_apt_clean

  mkdir -p /phpfpm/www/ /phpfpm/var/ /phpfpm/logs/

  # Give a generator to Supervisor
  {
    echo "#!/bin/bash"
    echo "/bocker.sh ed_phpfpm_generate_config"
  } \
  > /etc/s.supervisor/phpfpm.sh
}

ed_phpfpm_daemonize() {
  exec /usr/sbin/php5-fpm -F -y /phpfpm/phpfpm.conf
}

ed_phpfpm_generate_nginx_config() {
  cat \
<<-EOF
  server {
    listen       80;
    server_name  ${PHPFPM_DOMAIN} ${PHPFPM_OTHER_DOMAINS:-};
    root         /phpfpm/www/;

    index index.php index.html;

    error_log   /var/log/nginx/${PHPFPM_DOMAIN}.error.log;
    access_log  /var/log/nginx/${PHPFPM_DOMAIN}.acces.log main;

    include /etc/nginx/misc/security.conf;

    location ~ \.php$ {
      fastcgi_pass     unix:/phpfpm/var/phpfpm.sock;
      fastcgi_index    index.php;
      fastcgi_param    SCRIPT_FILENAME  /phpfpm/www/\$fastcgi_script_name;
      include          /etc/nginx/fastcgi_params;
    }
  }
EOF
}

# Note: This method is invoked by `supervisore`, as root account,
# before any real daemons are started. The script will check if
# there is a file `/etc/nginx/sites/phpfpm.conf`. If `not`, it
# will invoke `ed_phpfpm_generate_nginx_config` to create a new one.
#
# So, if you want to override `ed_phpfpm_generate_nginx_config`,
# you can simply do that, e.g. with `ed_ship`, in your `Bockerfile`.
# See an example from `wordpress` Bockerfile.
#
ed_phpfpm_generate_config() {
  local _F_CONFIG="/etc/nginx/sites/phpfpm.conf"
  export PHPFPM_DOMAIN="${PHPFPM_DOMAIN:-$(hostname -f || hostname)}"

  if [[ ! -f "$_F_CONFIG" ]]; then
    echo >&2 ":: Warning: Generating $_F_CONFIG)..."
    ed_phpfpm_generate_nginx_config > $_F_CONFIG
  fi

  # Generating php-fpm configuration
  _F_CONFIG="/phpfpm/phpfpm.conf"
  if [[ ! -f $_F_CONFIG ]]; then
    echo >&2 ":: Using the default configuration file..."
    cp -fv $_F_CONFIG.default $_F_CONFIG
  fi

  # Fix permissions
  mkdir -pv /phpfpm/var/ /phpfpm/logs/
  chown -c www-data:www-data /phpfpm/var/ /phpfpm/logs/
  chmod -c 750 /phpfpm/var/ /phpfpm/logs/

  # Generate Supervisor configuration
  cat \
    > /etc/s.supervisor/phpfpm.s \
<<EOF
[program:phpfpm]
command=/bocker.sh ed_phpfpm_daemonize
process_name=%(program_name)s
numprocs=1
directory=/
umask=022
priority=999
autostart=true
autorestart=true
startsecs=1
startretries=3
exitcodes=0,2
stopsignal=TERM
stopwaitsecs=10
user=www-data
redirect_stderr=true
stdout_logfile=/supervisor/phpfpm.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stdout_capture_maxbytes=0
stdout_events_enabled=false
stderr_logfile=AUTO
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10
stderr_capture_maxbytes=0
stderr_events_enabled=false
environment=
EOF

}
