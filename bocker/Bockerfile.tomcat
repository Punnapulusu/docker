#!/bin/bash

# Purpose: Create a container with tomcat-7 daemon
# Author : Anh K. Huynh
# Date   : 2015 May 21 (ported from the former Dockerfile)
# Note   : Based-on Docker's library file

ed_reuse "$(dirname ${BASH_SOURCE[0]:-.})"/Bockerfile.supervisor

ed_expose 8080
ed_ship   --later \
            ed_tomcat_daemonize \
            ed_tomcat_generate_config \
            ed_tomcat_update_admin_password \
            ed_tomcat_reload_context \
            ed_tomcat_reload \
            ed_tomcat_restart

ed_bocker() {
  ed_tomcat_install
  ed_tomcat_prepare_user
}

ed_tomcat_install() {
  ed_apt_install openjdk-7-jre tomcat7 tomcat7-admin xmlstarlet
  ed_apt_clean

  # Give a generator to Supervisor
  {
    echo "#!/bin/bash"
    echo "/bocker.sh ed_tomcat_generate_config"
  } \
  > /etc/s.supervisor/tomcat.sh
}

ed_tomcat_prepare_user() {

  mkdir -pv /tomcat/webapps/ /tomcat/work/ /tomcat/logs/

  ln -s /usr/share/tomcat7-admin/manager/ /tomcat/webapps/
  ln -s /usr/share/tomcat7-admin/host-manager/ /tomcat/webapps/
  ln -s /usr/share/tomcat7/lib/ /tomcat/lib

  mv /etc/tomcat7/ /tomcat/conf

  useradd -K UID_MIN=10000 tomcat

  ln -s /tomcat/ /home/tomcat
}

ed_tomcat_daemonize() {
  exec \
    /usr/bin/java \
    $TOMCAT_EXTRA \
    -Dfile.encoding=UTF-8 \
    -Djava.util.logging.config.file=/tomcat/conf/logging.properties \
    -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \
    -Djava.endorsed.dirs=/usr/share/tomcat7/endorsed \
    -classpath /usr/share/tomcat7/bin/bootstrap.jar:/usr/share/tomcat7/bin/tomcat-juli.jar \
    -Dcatalina.base=/tomcat/ \
    -Dcatalina.home=/tomcat/ \
    -Djava.io.tmpdir=/tmp/ \
    org.apache.catalina.startup.Bootstrap start
}

ed_tomcat_generate_config() {
  ed_tomcat_update_admin_password

  TOMCAT_AUTO_DEPLOY="${TOMCAT_AUTO_DEPLOY:-false}"
  TOMCAT_UNPACK_WAR="${TOMCAT_UNPACK_WAR:-true}"

  if [[ -w "/tomcat/conf/server.xml" ]]; then
    local _tmpfile="$(mktemp)"
    xmlstarlet ed \
      -u "/Server/Service/Engine/Host/@unpackWARs" -v "${TOMCAT_UNPACK_WAR,,}" \
      -u "/Server/Service/Engine/Host/@autoDeploy" -v "${TOMCAT_AUTO_DEPLOY,,}" \
      -d "/Server/Service/Engine/Host/Valve[@className='org.apache.catalina.valves.AccessLogValve']" \
      /tomcat/conf/server.xml \
      > $_tmpfile

    mv -fv $_tmpfile /tomcat/conf/server.xml
  fi

  local _flogging="/tomcat/conf/logging.properties"
  if [[ -w "$_flogging" ]]; then
    sed -i -r -e "s#(1catalina.org.apache.juli.FileHandler.prefix)\s*=.+#\1 = catalina__${HOSTNAME}.#g" "$_flogging"
    sed -i -r -e "s#(2localhost.org.apache.juli.FileHandler.prefix)\s*=.+#\1 = localhost_${HOSTNAME}.#g" "$_flogging"
  fi

  chown root:tomcat /tomcat/
  chown -R root:tomcat /tomcat/conf/
  chown tomcat:tomcat /tomcat/work/ /tomcat/logs/

  find /tomcat/conf/ -type f -exec chmod 640 -c {} \;

  ed_supervisor_config_template \
    --name "tomcat" \
    --command "/bocker.sh ed_tomcat_daemonize" \
    --dir "/tomcat/" \
    --user "tomcat" \
    --log "tomcat_${HOSTNAME}"
}

# Reload a tomcat context. If $TOMCAT_ADMIN_PASSWD is provided,
# it will be usead. If 'not', the script tries to detect administrator
# password from `/tomcat/conf/tomcat-users.xml` file; the pattern is
#
#     name="admin" password="YOUR_PASSWORD"
#
# Double quote (") is required in this pattern.
#
ed_tomcat_reload_context() {
  local _fconfig="/tomcat/conf/tomcat-users.xml"

  if [[ ! -f "$_fconfig" ]]; then
    echo >&2 ":: $FUNCNAME: Configuration file not found: '$_fconfig'."
    return 1
  fi

  if [[ -n "${TOMCAT_ADMIN_PASSWD:-}" ]]; then
    _password="$TOMCAT_ADMIN_PASSWD"
  else
    _password="$(xmlstarlet sel -t \
      -m "/tomcat-users/user[@name='admin']" -v "@password" -o '' "$_fconfig")"
  fi

  curl -LSs "http://localhost:8080/manager/text/reload?path=${1:-/}" -u "admin:$_password"
}

# Update /tomcat/tomcat-users.xml if $TOMCAT_ADMIN_PASSWD is provided.
ed_tomcat_update_admin_password() {
  local _fconfig="/tomcat/conf/tomcat-users.xml"

  if [[ ! -w "$_fconfig" ]]; then
    echo 1>&2 ":: $FUNCNAME: File not writable '$_fconfig'."
    return 0
  fi

  if [[ -z "${TOMCAT_ADMIN_PASSWD:-}" ]]; then
    echo 1>&2 ":: $FUNCNAME: \$TOMCAT_ADMIN_PASSWD is empty."
    echo 1>&2 ":: $FUNCNAME: Random password will be generated."
    TOMCAT_ADMIN_PASSWD="$(</dev/urandom tr -dc '_A-Z-a-z-0-9@#$%' | head -c16; echo "$RANDOM";)"
  fi

  cat > "$_fconfig" <<EOF
<?xml version='1.0' encoding='utf-8'?>
<tomcat-users>
  <role rolename="admin"/>
  <role rolename="admin-gui"/>
  <role rolename="admin-script"/>
  <role rolename="manager"/>
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="manager-jmx"/>
  <role rolename="manager-status"/>
  <user name="admin" password="${TOMCAT_ADMIN_PASSWD}" roles="admin,manager,admin-gui,admin-script,manager-gui,manager-script,manager-jmx,manager-status" />
</tomcat-users>
EOF
}

ed_tomcat_restart() {
  echo >&2 ":: Restarting tomcat instance..."
  s restart tomcat
}
