#!/bin/bash

# Purpose: Bocker library for Supervisor support
# Author : Anh K. Huynh
# Date   : 2015 May 15th

__SUPERVISOR_DIR="$(dirname ${BASH_SOURCE[0]:-.})"

ed_reuse $__SUPERVISOR_DIR/Bockerfile.base
# FIXME: Supervisor requires three components `cron`, `exim4`, `msyslog`.
# FIXME: If any of them is dropped, please modify the init script
# FIXME:  (`ed_supervisor_install_init_script`)
ed_reuse $__SUPERVISOR_DIR/Bockerfile.cron
ed_reuse $__SUPERVISOR_DIR/Bockerfile.exim4
ed_reuse $__SUPERVISOR_DIR/Bockerfile.msyslog

# ed_onbuild COPY "supervisor/*.sh supervisor/*.s /etc/s.supervisor/"
# ed_onbuild COPY "cron.d/* /etc/cron.d/"

ed_ship --later \
  ed_supervisor_generate_base_config \
  ed_supervisor_fix_uid_gid \
  ed_supervisor_execute_generators \
  ed_supervisor_daemonize \
  ed_supervisor_config_template \
  ed_supervisor_reset_all_environments

ed_bocker() {
  ed_group \
    ed_supervisor_env \
    ed_supervisor_install_base \
    ed_supervisor_install_supervisor \
    ed_supervisor_install_init_script
}

########################################################################
# Container init script
########################################################################

ed_supervisor_daemonize() {
  ed_supervisor_generate_base_config
  ed_supervisor_fix_uid_gid

  ed_supervisor_execute_generators

  # Built-in generators
  ed_cron_generate_config
  ed_exim4_generate_config
  ed_msyslog_generate_config

  ed_supervisor_reset_all_environments
  exec /usr/bin/supervisord --configuration /etc/supervisord.conf
}

########################################################################
# Dockerbuild utils
########################################################################

ed_supervisor_env()  {
  export SUPERVISOR_URL="https://github.com/icyfork/supervisor/archive/v3.1.3_fluentd.tar.gz?patch=2015-Oct-23"
  export SUPERVISOR_SHA1="c482efbe92ace1a3baac67ad8b1b67b78d909232"
}

ed_supervisor_install_base() {
  ed_apt_install \
      supervisor cron exim4-daemon-light \
      logrotate \
      curl ca-certificates

  ed_apt_clean

  mkdir -p /tmp/src/
  cd /tmp/src/

  curl -Los "$SUPERVISOR_URL" -o "supervisord.tar.gz"
  echo "$SUPERVISOR_SHA1 *supervisord.tar.gz" \
  | sha1sum -c -

  tar -xzf supervisord.tar.gz --strip-components=1
  python2 setup.py install

  cd /tmp/
  rm -rf /tmp/src/

  rm -rf /etc/supervisor/
  mkdir -pv /etc/s.supervisor/ /supervisor/
  ln -s /usr/bin/supervisorctl /usr/bin/s
  rm -rf /var/log/exim4/ /var/spool/exim4/
}

ed_supervisor_install_supervisor() {
  ed_apt_install python-setuptools

  # Minimalistic syslog which just prints all messages received from
  # /dev/log to standard out. This is useful in docker containers
  # where you don't want to install a full blown syslog daemon,
  # in combination with supervisord/supervisor-stdout.
  curl -Lso /usr/bin/syslog-stdout.py \
    https://raw.githubusercontent.com/icyfork/syslog-stdout/master/syslog-stdout.py

  mkdir -pv /usr/src/pip/
  cd /usr/src/pip/

  # A simple supervisord event listener to relay process output to
  # supervisor's stdout. This is useful in situations where the output
  # will be collected and set to external logging framework, such as Heroku.
  curl -Lso - \
    https://github.com/icyfork/supervisor-stdout/archive/master.tar.gz \
    | tar -xzf - -C /usr/src/pip/ --strip-components=1

  python2 setup.py install

  cd /
  rm -rf /usr/src/pip/

  ed_apt_purge python-setuptools
}

ed_supervisor_install_init_script() {
  {
    echo "#!/bin/bash"
    echo "exec /bocker.sh ed_supervisor_daemonize"
  } \
  > /supervisor.sh

  chmod 755 /supervisor.sh
}

########################################################################
# Container utils
########################################################################

ed_supervisor_fix_uid_gid() {
  env \
  | grep -E '^[A-Z0-9]+_UID=[0-9]+$' \
  | awk -F '_UID=' '{
      name = tolower($1);
      if (name == "exim4") { name = "Debian-exim" ;}
      if (name == "www") { name = "www-data" ;}
      id = $2;
      if (id == 0) { id = 6000; }
      printf("groupmod -g %s %s || groupadd -g %s %s\n", id, name, id, name);
      printf("usermod -u %s -g %s %s || useradd -s /bin/true -u %s -g %s %s\n", id, id, name, id, id, name);
    }' \
  | bash -x

  env \
  | grep -E '^[A-Z0-9]+_GID=[0-9]+$' \
  | awk -F '_GID=' '{
      name = tolower($1);
      if (name == "exim4") { name = "Debian-exim" ;}
      if (name == "www") { name = "www-data" ;}
      id = $2;
      if (id == 0) { id = 6000; }
      printf("groupmod -g %s %s || groupadd -g %s %s\n", id, name, id, name);
    }' \
  | bash -x
}

ed_supervisor_execute_generators() {
  while read FILE; do
    bash -n "$FILE" \
    && {
      echo >&2 ":: $FUNCNAME => $FILE..."
      bash "$FILE"
    } \
    || true
  done \
  < <(find /etc/s.supervisor/ -type f -iname "*.sh" | sort)
}

ed_supervisor_generate_base_config() {
  cat \
  > /etc/supervisord.conf \
<<EOF
;
; supervisord main config file - v0.1
; Do not edit this file
;

[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file)
chmod=0700                      ; sockef file mode (default 0700)

[supervisord]
nodaemon=true
logfile=fluent:docker:parent:24224
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
childlogdir=/supervisor/         ; ('AUTO' child log dir, default $TEMP)
logfile_maxbytes=50MB            ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10               ; (num of main logfile rotation backups;default 10)
loglevel=${SUPERVISOR_LOG_LEVEL:-info}             ; (log level;default info; others: debug,warn,trace)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

[include]
files = /etc/s.supervisor/*.s
EOF
}

ed_supervisor_config_template() {
  local _name=
  local _command=
  local _stop_signal="TERM"
  local _workdir="/tmp/"
  local _user="nobody"
  local _env=""
  local _logname=

  while (( $# )); do
    case "$1" in
    "-n"|"--name")    shift; _name="$1" ;;
    "-c"|"--command") shift; _command="$1" ;;
    "-s"|"--signal")  shift; _stop_signal="$1" ;;
    "-d"|"--dir")     shift; _workdir="$1" ;;
    "-u"|"--user")    shift; _user="$1" ;;
    "-e"|"--env")     shift; _env="$1,$_env" ;;
    "-l"|"--log")     shift; _logname="$1" ;;
    esac
    shift
  done

  if [[ -z "$_name" || -z "$_command" ]]; then
    echo >&2 ":: $FUNCNAME: Missing name/command."
    return 1
  fi

  _logname="${_logname:-${HOSTNAME}_${_name}}"

  cat \
    > "/etc/s.supervisor/$_name.s" \
<<EOF
[program:$_name]
command=$_command
process_name=%(program_name)s
numprocs=1
directory=$_workdir
umask=022
priority=999
autostart=true
autorestart=true
startsecs=1
startretries=3
exitcodes=0,2
stopsignal=$_stop_signal
stopwaitsecs=10
user=$_user
redirect_stderr=true
stdout_logfile=fluent:$_name
environment=${_env%,*}
serverurl=AUTO
EOF
}

ed_supervisor_reset_all_environments() {
  while read env; do
    unset $env
  done < \
    <( \
      env \
      | grep -E '^[^ ]' \
      | awk -F= '{print $1}' \
      | grep -v '^_$' \
      | grep -v '^PATH$' \
      | grep -v '^HOME$' \
      | grep -v '^HOSTNAME$' \
      | grep -v '^PWD$' \
      | grep -v '^LOGNAME$' \
      | grep -v '^SHELL$' \
      | grep -v '^USER$' \
      | grep -v '^LANG$' \
      | grep -v '^LC_NAME$'
    )
}
