#!/bin/bash

# Purpose: Bocker library for Supervisor support
# Author : Anh K. Huynh
# Date   : 2015 May 15th

ed_reuse "$(dirname ${BASH_SOURCE[0]:-.})"/Bockerfile.base

ed_ship --later \
  ed_supervisor_generate_base_config \
  ed_supervisor_fix_uid_gid \
  ed_supervisor_execute_generators \
  ed_supervisor_daemonize \
  ed_supervisor_config_template

ed_ship \
  ed_supervisor_generator

ed_bocker() {
  ed_group \
    ed_supervisor_env \
    ed_supervisor_install_base \
    ed_supervisor_install_supervisor \
    ed_supervisor_install_init_script
}

########################################################################
# Container init script
########################################################################

ed_supervisor_daemonize() {
  ed_supervisor_generate_base_config
  ed_supervisor_fix_uid_gid
  ed_supervisor_execute_generators
  exec -c /usr/bin/supervisord --configuration /etc/supervisord.conf
}

########################################################################
# Dockerbuild utils
########################################################################

ed_supervisor_env()  {
  export SUPERVISOR_URL="https://github.com/icyfork/supervisor/archive/v3.1.3_fluentd.tar.gz?patch=2015-Nov-10"
  export SUPERVISOR_SHA1="6bf1a61abd49b64aac15500a989094d163eecbf1"
  export SUPERVISOR_VERSION="3.1.3"
}

ed_supervisor_install_base() {
  pacman -Sy
  pacman -S curl ca-certificates
  pacman -Sccc

  rm -rf /etc/supervisor/
  mkdir -pv /etc/s.supervisor/ /supervisor/
  ln -s /usr/bin/supervisorctl /usr/bin/s
}

ed_supervisor_install_supervisor() {
  local _packages="python-setuptools python-pip gcc libc6-dev make g++ python-dev"

  pacman -Sy
  pacman -S py-pip
  pacman -Sccc

  mkdir -p /tmp/src/
  cd /tmp/src/

  curl -sSL "$SUPERVISOR_URL" -o "supervisord.tar.gz"
  echo "$SUPERVISOR_SHA1 *supervisord.tar.gz" \
  | sha1sum -c -

  tar xzf supervisord.tar.gz
  cd supervisor-$SUPERVISOR_VERSION*

  python2 setup.py install

  cd /tmp/
  rm -rf /tmp/src/

  test "$(supervisord --version)" = "$SUPERVISOR_VERSION"
}

ed_supervisor_install_init_script() {
  {
    echo "#!/bin/bash"
    echo "exec /bocker.sh ed_supervisor_daemonize"
  } \
  > /supervisor.sh

  chmod 755 /supervisor.sh
}

########################################################################
# Container utils
########################################################################

# Alpine may not have a `shadow` package, hence we need a tricky way
# to modify the /etc/passwd and /etc/group.
#
# * If user doesn't exist, create them, with specific UID
# * If group doesn't exit, create them, with specific GID
#
ed_supervisor_fix_uid_gid() {
  # User modification
  while read _line; do
    read uname uid _ <<< $_line

    grep -qE "^$uname:" /etc/passwd
    if [[ $? -ge 1 ]]; then
      echo >&2 ":: Adding new user '$uname' (uid: $uid)"
      addgroup -g "$uid" "$uname" || true
      adduser -G "$uname" -u "$uid" -s /sbin/nologin "$uname"
    else
      # FIXME: Skip updating if the current UID is expected.
      echo >&2 ":: Updating known user '$uname' (uid: $uid)"
      sed -i -r -e "s#^$uname:([^:]+):[0-9]+:(.+)#$uname:\1:$uid:\2#g" /etc/passwd
    fi

    echo >&2 ":: '$uname' field in /etc/passwd"
    grep "^$uname:" /etc/passwd
  done < <( \
    env \
    | grep -E '^[A-Z0-9]+_UID=[0-9]+$' \
    | awk -F '_UID=' '{
        printf("%s %s\n", tolower($1), $2);
      }'
  )

  # Group modification. Please note that we also need to modify
  # the `gid` of entries in /etc/passwd, too :)
  while read _line; do
    read gname gid _ <<< $_line

    grep -qE "^$gname:" /etc/group
    if [[ $? -ge 1 ]]; then
      echo >&2 ":: Adding new group '$gname' (gid: $gid)"
      adduser -g "$uid" "$gname"
      continue
    fi

    # Fetch the current `gid` of current group
    cgid="$(\
      < /etc/group \
      awk -vGNAME="$gname" -F: '{ if ($1 == GNAME) {print $3}}' \
      | tail -1 \
      )"

    if [[ "$cgid" == "$gid" ]]; then
      echo >&2 ":: Current group '$gname' already has gid '$gid'."
      continue
    fi

    echo >&2 ":: Updating known group '$uname' ($cgid => $gid)"
    sed -i -r -e "s#^$gname:([^:]+):$cgid:(.+)#$gname:\1:$gid:\2#g" /etc/group

    echo >&2 ":: New '$gname' field in /etc/group"
    grep "^$gname:" /etc/group

    echo >&2 ":: ($gid) Updating /etc/passwd..."

    < /etc/passwd \
    > /etc/passwd.new \
    awk -F: -v "GID=$gid" -v "CGID=$cgid" \
      '{
        if ($4 == CGID) {
          printf("%s:%s:%s:%s:%s:%s:%s\n", $1, $2, $3, GID, $5, $6, $7);
        }
        else {
          print $0;
        }
      }
      '
    diff /etc/passwd /etc/passwd.new >/dev/null
    if [[ $? -ge 1 ]]; then
      chmod 644 /etc/passwd.new
      mv -fv /etc/passwd.new /etc/passwd
    else
      rm -fv /etc/passwd.new
    fi
  done < <( \
    env \
    | grep -E '^[A-Z0-9]+_GID=[0-9]+$' \
    | awk -F '_GID=' '{
        printf("%s %s\n", tolower($1), $2);
      }'
  )
}

ed_supervisor_execute_generators() {
  while read FILE; do
    bash -n "$FILE" \
    && {
      echo >&2 ":: $FUNCNAME => $FILE..."
      bash "$FILE"
    } \
    || true
  done \
  < <(find /etc/s.supervisor/ -type f -iname "*.sh" | sort)
}

ed_supervisor_generate_base_config() {
  cat \
  > /etc/supervisord.conf \
<<EOF
;
; supervisord main config file - v0.1
; Do not edit this file
;

[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file)
chmod=0700                      ; sockef file mode (default 0700)

[supervisord]
nodaemon=true
logfile=fluent:${SUPERVISOR_FLUENT_TAG_HOST_PORT:-docker:parent:24224}:/supervisor/${HOSTNAME}_main.log
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
childlogdir=/supervisor/         ; ('AUTO' child log dir, default $TEMP)
logfile_maxbytes=50MB            ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10               ; (num of main logfile rotation backups;default 10)
loglevel=${SUPERVISOR_LOG_LEVEL:-info}             ; (log level;default info; others: debug,warn,trace)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

[include]
files = /etc/s.supervisor/*.s
EOF
}

ed_supervisor_config_template() {
  local _name=
  local _command=
  local _stop_signal="TERM"
  local _workdir="/tmp/"
  local _user="nobody"
  local _env=""
  local _logname=
  local _stop_waitsecs=10

  while (( $# )); do
    case "$1" in
    "-n"|"--name")    shift; _name="$1" ;;
    "-c"|"--command") shift; _command="$1" ;;
    "-s"|"--signal")  shift; _stop_signal="$1" ;;
    "-d"|"--dir")     shift; _workdir="$1" ;;
    "-u"|"--user")    shift; _user="$1" ;;
    "-e"|"--env")     shift; _env="$1,$_env" ;;
    "-l"|"--log")     shift; _logname="$1" ;;
    "--stopwaitsecs") shift; _stop_waitsecs="$1" ;;
    esac
    shift
  done

  if [[ -z "$_name" || -z "$_command" ]]; then
    echo >&2 ":: $FUNCNAME: Missing name/command."
    return 1
  fi

  _logname="${_logname:-${HOSTNAME}_${_name}}"

  cat \
    > "/etc/s.supervisor/$_name.s" \
<<EOF
[program:$_name]
command=$_command
process_name=%(program_name)s
numprocs=1
directory=$_workdir
umask=022
priority=999
autostart=true
autorestart=true
startsecs=1
startretries=3
exitcodes=0,2
stopsignal=$_stop_signal
stopwaitsecs=$_stop_waitsecs
user=$_user
redirect_stderr=false
stdout_logfile=fluent:$_name.stdout:x:0:/supervisor/$_logname.stdout.log
stderr_logfile=fluent:$_name.stderr:x:0:/supervisor/$_logname.stderr.log
environment=PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/sbin:/usr/local/bin/,${_env%,*}
serverurl=AUTO
EOF
}

ed_supervisor_generator() {
  local _name="${1:-}"
  [[ -n "${_name}" ]] || return 0

  {
    echo "#!/bin/bash"
    echo "/bocker.sh $_name"
  } \
  > /etc/s.supervisor/$_name.sh
}
