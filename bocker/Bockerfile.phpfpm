#!/bin/bash

# Purpose: Bocker library to generate Dockerfile for phpfpm image
# Author : Anh K. Huynh
# Date   : 2015 May 19th

__PHPFPM_DIR="$(dirname ${BASH_SOURCE[0]:-.})"

ed_reuse  $__PHPFPM_DIR/Bockerfile.nginx
ed_volume /phpfpm/www/
ed_copy   --later phpfpm.conf.default /phpfpm/

ed_ship --later \
  ed_phpfpm_daemonize \
  ed_phpfpm_generate_config \
  ed_phpfpm_generate_nginx_config

ed_bocker() {
  ed_phpfpm_install
}

########################################################################

ed_phpfpm_install() {
  ed_apt_install \
    php5-mysql \
    php5-curl \
    php5-gd \
    php5-cgi \
    php-mail \
    php5-fpm \
    php5-readline \
    php5-json

  ed_apt_clean

  mkdir -p /phpfpm/www/ /phpfpm/var/ /phpfpm/logs/

  ed_supervisor_generator ed_phpfpm_generate_config
}

ed_phpfpm_daemonize() {
  exec /usr/sbin/php5-fpm -F -y /phpfpm/phpfpm.conf
}

ed_phpfpm_generate_nginx_config() {
  cat \
<<-EOF
  server {
    listen       80;
    server_name  ${PHPFPM_DOMAIN} ${PHPFPM_OTHER_DOMAINS:-};
    root         /phpfpm/www/;

    index index.php index.html;

    error_log   /var/log/nginx/${PHPFPM_DOMAIN}.error.log;
    access_log  /var/log/nginx/${PHPFPM_DOMAIN}.acces.log main;

    include /etc/nginx/misc/security.conf;

    location ~ \.php$ {
      fastcgi_pass     unix:/phpfpm/var/phpfpm.sock;
      fastcgi_index    index.php;
      fastcgi_param    SCRIPT_FILENAME  /phpfpm/www/\$fastcgi_script_name;
      include          /etc/nginx/fastcgi_params;
    }
  }
EOF
}

# Note: This method is invoked by `supervisore`, as root account,
# before any real daemons are started. The script will check if
# there is a file `/etc/nginx/sites/phpfpm.conf`. If `not`, it
# will invoke `ed_phpfpm_generate_nginx_config` to create a new one.
#
# So, if you want to override `ed_phpfpm_generate_nginx_config`,
# you can simply do that, e.g. with `ed_ship`, in your `Bockerfile`.
# See an example from `wordpress` Bockerfile.
#
ed_phpfpm_generate_config() {
  local _F_CONFIG="/etc/nginx/sites/phpfpm.conf"
  export PHPFPM_DOMAIN="${PHPFPM_DOMAIN:-$(hostname -f || hostname)}"

  if [[ ! -f "$_F_CONFIG" ]]; then
    echo >&2 ":: Warning: Generating $_F_CONFIG)..."
    ed_phpfpm_generate_nginx_config > $_F_CONFIG
  fi

  # Generating php-fpm configuration
  _F_CONFIG="/phpfpm/phpfpm.conf"
  if [[ ! -f $_F_CONFIG ]]; then
    echo >&2 ":: Using the default configuration file..."
    cp -fv $_F_CONFIG.default $_F_CONFIG
  fi

  # Fix permissions
  mkdir -pv /phpfpm/var/ /phpfpm/logs/
  chown -c www-data:www-data /phpfpm/var/ /phpfpm/logs/
  chmod -c 750 /phpfpm/var/ /phpfpm/logs/

  # Support modules loading from environment
  #   -e PHP_zend=
  #   -e PHP_mods=

  local _d_config="/etc/php5/fpm/conf.d/"
  echo >&2 ":: Removing all files from $_d_config..."
  rm -fv "$_d_config"/*

  export PHP_mods="${PHP_mods:-gd,readline,json,curl,mysql,mysqli,pdo_mysql,pdo@30}"
  export PHP_zend="${PHP_zend:-opcache}"

  while read _line; do
    _mods="${_line/PHP_/}"
    _type="${_mods%%=*}"
    _mods="${_mods##*=}"

    if [[ -z "$_mods" || -z "$_type" ]]; then
      echo >&2 ":: Empty module settings or wrong type"
      exit 1
    fi

    case "$_type" in
    "mods") _order_default=50 ; _prefix="";;
    "zend") _order_default=10 ; _prefix="zend_";;
    *)
      echo >&2 ":: Unknown type '$_type'";
      exit 1
      ;;
    esac

    for _mod in $(sed -e 's#,# #g' <<<$_mods); do
      _order="${_mod##*@}"
      if [[ "$_order" == "$_mod" ]]; then
        _order="$_order_default"
      else
        _mod="${_mod%%@*}"
      fi

      _file="$_d_config"/${_order}-${_mod}.ini
      {
        echo "${_prefix}extension=${_mod}.so"
      } > "$_file"

    done
  done < <(env | grep -E "^PHP_[a-z]")

  echo >&2 ":: List of installed modules"
  php5-fpm -m || exit 1

  ed_supervisor_config_template \
    --name "phpfpm" \
    --command "/bocker.sh ed_phpfpm_daemonize" \
    --dir "/phpfpm/" \
    --user "www-data"
}
