#!/bin/bash

# Purpose: Create an image with Percona
# Author : Anh K. Huynh
# Date   : 2015 May 21 (ported from the former Dockerfile)
# Based on
#  https://github.com/docker-library/percona/tree/master/5.6
#
# TODO   :
#   * Add logging support
#   * Mount variant directory (/var/run/mysqld/)
#

ed_reuse  "$(dirname ${BASH_SOURCE[0]:-.})"/Bockerfile.supervisor
source    "$(dirname ${BASH_SOURCE[0]:-.})"/Bockerfile.xtrabackup

ed_expose 3306
ed_ship   --later \
            ed_percona_init \
            ed_percona_generate_config \
            ed_percona_set_datadir \
            ed_percona_daemonize \
            ed_percona_generate_init_sql

# By exporting these volumes, backup program can use them.
# (See for example, https://www.percona.com/doc/percona-xtrabackup/2.2/.)
# It isn't a good idea to use the same /mysql/ for multiple instance.
ed_volume   /mysql/ /etc/mysql/ /var/run/mysqld/

ed_bocker() {
  ed_group \
    ed_percona_env \
    ed_percona_install
  ed_xtrabackup_install
}

ed_percona_env() {
  export PERCONA_MAJOR=5.6
}

ed_percona_install() {

  apt-key adv \
      --keyserver keys.gnupg.net \
      --recv-keys 1C4CBDCDCD2EFD2A

  echo 'deb http://repo.percona.com/apt wheezy main' \
      > /etc/apt/sources.list.d/percona.list

  ed_apt_install percona-server-server-$PERCONA_MAJOR
  ed_apt_clean

  mkdir /mysql/
  groupmod -g 10003 mysql
  usermod -u 10003 -g 10003 mysql

  # Due to Docker issue (783), these stuff must be removed!
  rm -rf /var/log/mysql/ /var/run/mysqld/

  # This is created by default installation. We don't need it.
  rm -rf /var/lib/mysql/

  # Give a generator to Supervisor
  {
    echo "#!/bin/bash"
    echo "/bocker.sh ed_percona_generate_config"
  } \
  > /etc/s.supervisor/percona.sh
}

########################################################################

ed_percona_set_datadir() {
  if [[ "$UID" == 0 ]]; then
    if [[ -f "/mysql/my.cnf" ]]; then
      echo >&2 ":: MySQL: /mysql/my.conf found. Copying it to /etc/mysql/my.conf"
      cp -vf /mysql/my.cnf /etc/mysql/my.cnf || return 1
    fi

    # Override all user environments!!!
    export MYSQL_bind__address='*'
    export MYSQL_skip__networking='false'
    export MYSQL_datadir="/mysql/"

    while read _line; do
      _var_name="$(sed -r -e 's#MYSQL_(.+)=.*#\1#' -e 's#__#-#g' <<< $_line)"
      _var_value="$(sed -r -e 's#MYSQL_.+=(.*)$#\1#'             <<< $_line)"

      sed -r -i -e "/#?[[:space:]]*$_var_name=/d "               /etc/mysql/my.cnf
      sed -r -i -e "/#?[[:space:]]*$_var_name\$/d"               /etc/mysql/my.cnf
      sed -r -i -e "/#?[[:space:]]*$_var_name[[:space:]]*/d"     /etc/mysql/my.cnf
      sed -r -i -e "/\[mysqld]/a $_var_name = $_var_value"       /etc/mysql/my.cnf
    done < <(
      env \
      | grep -E "^MYSQL_[a-z]" \
    )
  fi

  _D_DATA="$(/usr/sbin/mysqld --verbose --help 2>/dev/null | awk '$1 == "datadir" { print $2; exit }')"
  if [[ "$_D_DATA" != "/mysql/" ]]; then
    echo >&2 ":: MySQL: data directory must be /mysql/. Current value: $_D_DATA."
    return 1
  fi

  echo >&2 ":: $FUNCNAME: Checking configuration file..."
  /usr/sbin/mysqld --verbose --help >/dev/null || return 1

  echo "$_D_DATA"
}

ed_percona_init() {
  _D_DATA="$(ed_percona_set_datadir)" || exit 1

  if [[ -f "/mysql/ibdata1" ]]; then
    return 0
  fi

  local _f_init='/mysql/docker-init.sql'

  if [[ -f "$_f_init" ]]; then
    return 0
  fi

  echo >&2 ":: MySQL: Unable to locate the base data directory /mysql/mysql/."
  echo >&2 ":: MySQL: Going to initialize a new database set."

  echo >&2 ':: MySQL: Running mysql_install_db...'
  mysql_install_db --datadir="/mysql/"
  echo >&2 ':: MySQL: Finished mysql_install_db.'

  touch "$_f_init"
  chmod 600 "$_f_init"

  ed_percona_generate_init_sql > "$_f_init"
}

ed_percona_generate_init_sql() {
  if [[ -z "$MYSQL_ROOT_PASSWD" ]]; then
    MYSQL_ROOT_PASSWD="#$RANDOM#$RANDOM#"
    echo >&2 ":: MySQL: No password is provided. A random password will be used."
    echo >&2 ":: MySQL: You can find this password in '$_f_init'."
  fi

  # +------+--------------+
  # | User | Host         |
  # +------+--------------+
  # | root | %            | # our new entry         [CREATE]
  # | root | 127.0.0.1    | # local host entry      [NOOP]
  # | root | 5186a72fe95f | # container name        [DELETE]
  # | root | ::1          | # ipv6 support          [DELETE]
  # | root | localhost    | # localhost entry       [NOOP]
  # +------+--------------+

  # NOTE: Grant will create new user if not exist.
  cat > "$_f_init" \
<<-EOSQL
    DELETE FROM mysql.user WHERE user='';
    DELETE FROM mysql.user WHERE user='root' AND host<>'%' AND host<>'127.0.0.1' AND host<>'localhost';
    GRANT ALL ON *.* TO 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWD}';
    GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION;
    DROP DATABASE IF EXISTS test ;
    FLUSH PRIVILEGES ;
EOSQL
}

ed_percona_daemonize() {
  echo >&2 ":: $FUNCNAME: Checking configuration file..."
  /usr/sbin/mysqld --verbose --help >/dev/null || return 1

  echo >&2 ":: $FUNCNAME: Starting main daemon..."
  if [[ -f "/mysql/docker-init.sql" ]]; then
    exec /usr/sbin/mysqld \
        --init-file=/mysql/docker-init.sql
  fi

  exec /usr/sbin/mysqld
}

########################################################################
# Supervisor generator
########################################################################

ed_percona_generate_config() {
  _D_DATA="$(ed_percona_set_datadir)" || exit 1

  # These directories are removed at the Installation process
  mkdir -pv /var/run/mysqld/ /var/log/mysql/
  chown -R mysql:mysql /mysql/ /var/run/mysqld/ /var/log/mysql/

  # Initialize the database if necessary
  # NOTE: mysqld is from /usr/sbin/ directory. If "su -" is used,
  # the `mysqld` command is not found, and script just fails.
  su mysql -s /bin/bash -c "/bocker.sh ed_percona_init"
  if [[ $? -ge 1 ]]; then
    echo >&2 ":: $FUNCNAME: Aborted due to init fails."
    exit 1
  fi

  # Percona warning message
  cat <<-EOF
~~~~~~~
* Percona Server is distributed with several useful UDF (User Defined Function) from Percona Toolkit.
* Run the following commands to create these functions:

    mysql -e "CREATE FUNCTION fnv1a_64 RETURNS INTEGER SONAME 'libfnv1a_udf.so'"
    mysql -e "CREATE FUNCTION fnv_64 RETURNS INTEGER SONAME 'libfnv_udf.so'"
    mysql -e "CREATE FUNCTION murmur_hash RETURNS INTEGER SONAME 'libmurmur_udf.so'"

* See http://www.percona.com/doc/percona-server/5.6/management/udf_percona_toolkit.html for more details

~~~~~~~

* Remember to import timezone information to 'mysql' database.

* This can be done by executing the following command within container

    mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql

  ('mysql_tzinfo_to_sql' command is available in your container.)

* See also https://dev.mysql.com/doc/refman/5.6/en/time-zone-support.html.
~~~~~~~
EOF

  # now generator supervisor configuration
  ed_supervisor_config_template \
    --name "mysql" \
    --command "/bocker.sh ed_percona_daemonize" \
    --dir "/mysql/" \
    --user "mysql"
}
